{"is_source_file": true, "format": "Python", "description": "This file defines API routes for user management in a FastAPI application, including registration, login, profile retrieval, and leaderboard access, utilizing SQLAlchemy for database interactions.", "external_files": ["src.api.models", "src.api.db", "src.api.security"], "external_methods": ["get_password_hash", "verify_password", "create_access_token", "decode_access_token", "get_db"], "published": ["router"], "classes": [], "methods": [{"name": "authenticate_user(db: Session, username: str, password: str)", "description": "Authenticates a user by verifying the username and password against the database.", "scope": "", "scopeKind": ""}, {"name": "register(user: UserCreate, db: Session = Depends(get_db))", "description": "API endpoint for registering a new user.", "scope": "", "scopeKind": ""}, {"name": "login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))", "description": "API endpoint for user login, returning an access token.", "scope": "", "scopeKind": ""}, {"name": "get_profile(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))", "description": "API endpoint to retrieve the current user's profile information.", "scope": "", "scopeKind": ""}, {"name": "get_leaderboard(db: Session = Depends(get_db), limit: int = 10)", "description": "API endpoint to retrieve a list of top users ordered by ELO score.", "scope": "", "scopeKind": ""}], "calls": ["db.query", "db.add", "db.commit", "db.refresh", "verify_password", "get_password_hash", "create_access_token", "decode_access_token"], "search-terms": ["routers_user", "FastAPI routes", "user registration", "user login", "profile retrieval", "leaderboard", "SQLAlchemy ORM"], "state": 2, "file_id": 8, "knowledge_revision": 25, "git_revision": "d85424e7c48ba77dd0f7d0f0174282e9e01b830d", "revision_history": [{"17": ""}, {"25": "d85424e7c48ba77dd0f7d0f0174282e9e01b830d"}], "ctags": [{"_type": "tag", "name": "authenticate_user", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_user.py", "pattern": "/^def authenticate_user(db: Session, username: str, password: str):$/", "language": "Python", "kind": "function", "signature": "(db: Session, username: str, password: str)"}, {"_type": "tag", "name": "get_leaderboard", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_user.py", "pattern": "/^def get_leaderboard(db: Session = Depends(get_db), limit: int = 10):$/", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(get_db), limit: int = 10)"}, {"_type": "tag", "name": "get_profile", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_user.py", "pattern": "/^def get_profile(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_user.py", "pattern": "/^def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_user.py", "pattern": "/^def register(user: UserCreate, db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(user: UserCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_user.py", "pattern": "/^router = APIRouter($/", "language": "Python", "kind": "variable"}], "hash": "7cfc808f42d64b744f13b834bd75dc23", "format-version": 4, "code-base-name": "chess_backend", "filename": "chess_backend/src/api/routers_user.py", "fields": [{"name": "router = APIRouter(", "scope": "", "scopeKind": "", "description": "unavailable"}]}