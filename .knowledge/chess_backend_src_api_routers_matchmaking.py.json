{"is_source_file": true, "format": "Python", "description": "This source file defines API endpoints for matchmaking in an online chess platform using FastAPI. It includes functions to find a game or create a game with AI, handles user authentication, and interacts with database models for Game and User.", "external_files": ["src.api.models", "src.api.db", "src.api.security"], "external_methods": ["decode_access_token", "get_db"], "published": [], "classes": [{"name": "APIRouter", "description": "FastAPI's routing class used to organize API endpoints."}], "methods": [{"name": "get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))", "description": "Retrieves the current user based on access token, querying the database, and raises HTTP 401 if user not found.", "scope": "", "scopeKind": ""}, {"name": "find_match(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))", "description": "Finds a waiting game or creates a new match for the current user in matchmaking. Returns match status and game ID.", "scope": "", "scopeKind": ""}, {"name": "play_with_ai(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))", "description": "Creates a new game against AI for the current user, setting up the initial game state.", "scope": "", "scopeKind": ""}], "calls": ["decode_access_token", "db.query(User).filter(User.username == payload.get(\"sub\")).first()", "db.query(Game).filter(Game.status == \"waiting\", Game.is_vs_ai == False).filter(Game.white_id != current_user.id).first()", "db.commit()", "db.refresh(waiting_game)", "db.add(game)", "db.refresh(game)"], "search-terms": ["matchmaking", "FastAPI", "Game", "User", "matchmaking endpoints", "create game with AI"], "state": 2, "file_id": 10, "knowledge_revision": 21, "git_revision": "", "ctags": [{"_type": "tag", "name": "find_match", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_matchmaking.py", "pattern": "/^def find_match(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "get_current_user", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_matchmaking.py", "pattern": "/^def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):$/", "language": "Python", "kind": "function", "signature": "(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db))"}, {"_type": "tag", "name": "play_with_ai", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_matchmaking.py", "pattern": "/^def play_with_ai(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(get_db), current_user: User = Depends(get_current_user))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/online-chess-platform-7163-7173/chess_backend/src/api/routers_matchmaking.py", "pattern": "/^router = APIRouter($/", "language": "Python", "kind": "variable"}], "hash": "365722167334fe835a0d39492b12f4bd", "format-version": 4, "code-base-name": "chess_backend", "filename": "chess_backend/src/api/routers_matchmaking.py", "fields": [{"name": "router = APIRouter(", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"21": ""}]}